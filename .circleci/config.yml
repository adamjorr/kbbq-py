version: 2.1

executors:
  default-executor:
    docker:
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
    working_directory: ~/kbbq

commands:
  manual-install:
    description: "download, extract, configure, make, and make install a program"
    parameters:
      url:
        type: string
      installdir:
        type: string
        default: '/usr/local'
      unzip:
        type: string
        default: j
    steps:
      - run:
          name: install from << parameters.url >>
          command: |
            KBBQ_INST_URL=<< parameters.url >>
            KBBQ_INST_IDX=$(basename ${KBBQ_INST_URL%.*.*})-idx.txt
            wget -qO- $KBBQ_INST_URL | tar -x<< parameters.unzip >>v -f- --index-file=$KBBQ_INST_IDX
            cd $(head -n 1 $KBBQ_INST_IDX)
            ./configure --prefix=<< parameters.installdir >>
            make -j2
            sudo make install
            cd ..

  install-ubuntu-dependencies:
    description: "install ubuntu dependencies from apt"
    steps:
      - run:
          command: |
            sudo apt-get update
            sudo apt-get install -y zlib1g-dev libbz2-dev liblzma-dev lftp seqtk default-jre

  install-external-dependencies:
    description: "install external programs from their project urls"
    steps:
      - manual-install:
          url: http://ftp.gnu.org/gnu/tar/tar-latest.tar.bz2
      - manual-install:
          url: https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2
      - manual-install:
          url: https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
      - manual-install:
          url: https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2

  install-gatk:
    description: "install gatk and add to PATH"
    steps:
      - restore_cache:
          keys:
            - gatk-package-4.1.1.0
      - run:
          command: |
            if [ ! -e ~/gatk-4.1.1.0 ]; then
              cd
              wget https://github.com/broadinstitute/gatk/releases/download/4.1.1.0/gatk-4.1.1.0.zip
              unzip gatk-4.1.1.0.zip
              cd -
            fi
      - save_cache:
          key: gatk-package-4.1.1.0
          paths:
            - "~/gatk-4.1.1.0"

  install-picard:
    description: "install picard and add to PATH"
    steps:
      - restore_cache:
          keys:
            - picard-package-2.19.0
      - run:
          command: |
            if [ ! -e ~/picard ]; then
              mkdir -p ~/picard
              cd ~/picard
              wget https://github.com/broadinstitute/picard/releases/download/2.19.0/picard.jar
            fi
            sudo unlink $(which picard)
            function picard { java -jar ~/picard/picard.jar $@; }
            export -f picard
      - save_cache:
          key: picard-package-2.19.0
          paths:
            - "~/picard"

  install-py-dependencies:
    description: "checkout & install & cache python dependencies"
    steps:
      - checkout
      - restore_cache:
          keys:
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pip install --user pipenv
            pipenv install --dev
      - save_cache:
          key: pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"

  download-test-data:
    description: "download & cache test data"
    steps:
      - checkout
      - restore_cache:
          keys:
            - data-cache-v1-{{ .Branch }}-{{ checksum "tests/data/Makefile" }}
      - run:
          shell: /bin/bash
          environment:
            SHELL: /bin/bash
          command: |
            function picard { java -jar ~/picard/picard.jar $@; }
            export -f picard
            export PATH=${PATH}:~/gatk-4.1.1.0
            make -j2 -C tests/data SHELL=/bin/bash data
      - save_cache:
          key: data-cache-v1-{{ .Branch }}-{{ checksum "tests/data/Makefile" }}
          paths:
            - tests/data

jobs:
  build:
    executor: default-executor
    steps:
      - checkout
      - install-ubuntu-dependencies
      - install-external-dependencies
      - install-py-dependencies
      - install-gatk
      - install-picard
      - download-test-data
      - run:
          command: |
            pipenv run python -m pytest --junitxml=test-reports/junit.xml --cov=kbbq --cov-report=xml
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash)
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
